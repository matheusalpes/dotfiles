#+TITLE: Matheus Alpes's GNU Emacs Config
#+AUTHOR: Matheus Alpes
#+DESCRIPTION: Matheus Alpes's personal GNU Emacs config.
#+STARTUP: showeverthing
#+OPTION: toc:2

* Table of Contents :toc:
- [[#above-all][Above All]]
  - [[#elpaca][Elpaca]]
  - [[#exwm][EXWM]]
  - [[#sudo-edit][Sudo Edit]]
- [[#buffer-management][Buffer Management]]
  - [[#mouse-buttons][Mouse Buttons]]
- [[#completion-framework][Completion Framework]]
  - [[#company][Company]]
  - [[#consult][Consult]]
  - [[#embark][Embark]]
  - [[#marginalia][Marginalia]]
  - [[#minor-changes][Minor changes]]
  - [[#orderless][Orderless]]
  - [[#vertico][Vertico]]
- [[#document-viewing][Document Viewing]]
  - [[#pdfs][PDFs]]
- [[#fonts-and-icons][Fonts and Icons]]
  - [[#emojify][Emojify]]
  - [[#font-faces][Font Faces]]
  - [[#icons][Icons]]
- [[#git][Git]]
  - [[#git-time-machine][Git Time Machine]]
  - [[#magit][Magit]]
- [[#keybindings][Keybindings]]
  - [[#meow][Meow]]
  - [[#minibuffer-escape][Minibuffer Escape]]
- [[#launcher][Launcher]]
- [[#miscellaneous-software][Miscellaneous Software]]
  - [[#tldr][TLDR]]
- [[#org-mode][ORG Mode]]
  - [[#agenda][Agenda]]
  - [[#bullet-points][Bullet Points]]
  - [[#directory][Directory]]
  - [[#org-block-templates][ORG Block Templates]]
  - [[#org-roam][ORG Roam]]
  - [[#table-of-contents][Table of Contents]]
- [[#programming][Programming]]
  - [[#language-supporting][Language Supporting]]
  - [[#neotree][NeoTree]]
  - [[#projectile][Projectile]]
- [[#sane-defaults][Sane Defaults]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
- [[#ui][UI]]
  - [[#dashboard][Dashboard]]
  - [[#minor-changes-1][Minor Changes]]
  - [[#modeline][Modeline]]
  - [[#theme][Theme]]
  - [[#wallpaper][Wallpaper]]

* Above All
** Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))
#+end_src

** EXWM
#+begin_src emacs-lisp
  ;; Focus follows mouse
  (setq mouse-autoselect-window t
        focus-follows-mouse t)

  (defun alpes/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    (require 'exwm)

    ;; Set correct resolution
    (require 'exwm-randr)
    (exwm-randr-enable)
    (add-hook 'exwm-randr-screen-change-hook
              (lambda ()
                (start-process-shell-command
                 "xrandr" nil "xrandr --output eDP1 --off --output HDMI1 --primary --mode 1920x1080")))

    ;; Workspaces
    (setq exwm-workspace-number 5)

    ;; Forcing Tiling
    ;; (setq exwm-manage-force-tiling t)

    ;; Keys to pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j
            ?\C-\ ))

    ;; Ctrl + Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Global Keybindings
    (setq exwm-input-global-keys
          ;; Reset to line mode
          `(([?\s-r] . exwm-reset)

            ;; Launch apps via shell
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; Switch workspace using number keys
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create , i))))
                      (number-sequence 0 9))))
    (exwm-enable))
#+end_src

** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

* Buffer Management
** Mouse Buttons
#+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<drag-mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<mouse-9>") 'next-buffer)
  (global-set-key (kbd "<drag-mouse-9>") 'next-buffer)
#+end_src

* Completion Framework
** Company
#+begin_src emacs-lisp
  (use-package company
    :defer 2
    :diminish
    :custom
    (company-begin-commands '(self-insert-command))
    (company-idle-delay .1)
    (company-minimum-prefix-length 2)
    (company-show-numbers t)
    (company-tooltip-align-annotations 't)
    (global-company-mode t))

  (use-package company-box
    :after company
    :diminish
    :hook (company-mode . company-box-mode))
#+end_src

** Consult
#+begin_src emacs-lisp
  (use-package consult
    ;; Replace bindings. Lazily loaded due by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

    ;; By default `consult-project-function' uses `project-root' from project.el.
    ;; Optionally configure a different project root function.
    ;;;; 1. project.el (the default)
    ;; (setq consult-project-function #'consult--default-project--function)
    ;;;; 2. vc.el (vc-root-dir)
    ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
    ;;;; 3. locate-dominating-file
    ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
    ;;;; 4. projectile.el (projectile-project-root)
    ;; (autoload 'projectile-project-root "projectile")
    ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
    ;;;; 5. No project support
    ;; (setq consult-project-function nil)
    )
#+end_src

** Embark
#+begin_src emacs-lisp
  (use-package embark
    :ensure t

    :bind
    (("C-." . embark-act)         ;; pick some comfortable binding
     ("C-;" . embark-dwim)        ;; good alternative: M-.
     ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

    :init

    ;; Optionally replace the key help with a completing-read interface
    (setq prefix-help-command #'embark-prefix-help-command)

    ;; Show the Embark target at point via Eldoc. You may adjust the
    ;; Eldoc strategy, if you want to see the documentation from
    ;; multiple providers. Beware that using this can be a little
    ;; jarring since the message shown in the minibuffer can be more
    ;; than one line, causing the modeline to move up and down:

    ;; (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
    ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

    :config

    ;; Hide the mode line of the Embark live/completions buffers
    (add-to-list 'display-buffer-alist
                 '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                   nil
                   (window-parameters (mode-line-format . none)))))

  ;; Consult users will also want the embark-consult package.
  (use-package embark-consult
    :ensure t ; only need to install it, embark loads it after consult if found
    :hook
    (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :after vertico
    :ensure t
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+end_src

** Minor changes
#+begin_src emacs-lisp
  (savehist-mode 1)
  (recentf-mode)
  (setq completion-ignore-case t)
  (setq read-file-name-completion-ignore-case t)
#+end_src

** Orderless
#+begin_src emacs-lisp
  (use-package orderless
    :init
    (setq completion-styles '(orderless)
          completion-category-defaults nil
          completion-category-overrides '((file (styles-partial-completion)))))
#+end_src

** Vertico
#+begin_src emacs-lisp
  (use-package vertico
    :ensure t
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle)
    :init
    (vertico-mode))
#+end_src

* Document Viewing
** PDFs
*** PDF Tools
#+begin_src emacs-lisp
  (use-package pdf-tools
    :defer t
    :commands (pdf-loader-install)
    :mode "\\.pdf\\'"
    :bind (:map pdf-view-mode-map
                ("j" . pdf-view-next-line-or-next-page)
                ("k" . pdf-view-previous-line-or-previous-page)
                ("C-=" . pdf-view-enlarge)
                ("C--" . pdf-view-shrink))
    :init (pdf-loader-install)
    :config (add-to-list 'revert-without-query ".pdf"))

  (add-hook 'pdf-view-mode-hook #'(lambda () (interactive) (display-line-numbers-mode -1)))
#+end_src

* Fonts and Icons
** Emojify
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
        t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (bind-key* (kbd "C-c p") #'emojify-insert-emoji)) 
#+end_src

** Font Faces
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "GoMono Nerd Font Mono"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
		      :font "Tinos Nerd Font"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "GoMono Nerd Font Mono"
		      :height 120
		      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "GoMono Nerd Font Mono-12"))
  (setq-default line-spacing 0.12)
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
 #+end_src

Then run ~all-the-icons-install-fonts~.

* Git
I don't know why but all those Git programs can't work due transient and seq dependencies errors. I just have to put ~(use-package seq)~ beforing installing those programs. ~seq~ will show warning about being loaded before Elpaca, but after installing those programs, you can freely remove the ~(use-package seq)~ line.
#+begin_src emacs-lisp
  ;; (use-package seq)
#+end_src


** Git Time Machine
#+begin_src emacs-lisp
   (use-package git-timemachine
     :after git-timemachine
     :bind (:map git-timemachine-mode-map
                 ("C-j" . git-timemachine-show-previous-revision)
                 ("C-k" . git-timemachine-show-next-revision)))
#+end_src

** Magit
#+begin_src emacs-lisp
  (use-package magit)
#+end_src

* Keybindings
** Meow
#+begin_src emacs-lisp
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))

  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

  (use-package meow
    :ensure t
    :config
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1))
#+end_src



** Minibuffer Escape
#+begin_src emacs-lisp
  (global-set-key [escape] 'keyboard-escape-quit)
#+end_src

* Launcher
Creates and selects a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Runs ~app-launcher-run-app~ on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited.

#+begin_src emacs-lisp
  (use-package app-launcher
    :elpaca '(app-launcher :host github :repo "SebastienWae/app-launcher"))

  (defun emacs-run-launcher ()
    (interactive)
    (with-selected-frame
        (make-frame '((name . "emacs-run-launcher") 
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    ;;(auto-raise . t) ; focus on this frame
                    ;;(tool-bar-lines . 0)
                    ;;(menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)))
                    (unwind-protect
                      (app-launcher-run-app)
                      (delete-frame))))
#+end_src

Don't forget to create a shortcut for ~emacsclient -cF "((visibility . nil))" -e "(emacs-run-launcher)"~.

* Miscellaneous Software
** TLDR
#+begin_src emacs-lisp
  (use-package tldr)
#+end_src

* ORG Mode
** Agenda
*** Agenda Files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/Desktop/Agenda.org"))
#+end_src

*** Priorities
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :diminish
    :hook
      (org-mode . org-fancy-priorities-mode)
    :config
      (setq
        org-fancy-priorities-list '("🈲" "🈺" "🈯")
        org-priority-faces
          '((?A :foreground "#ff6c6b" :weight bold)
            (?B :foreground "#98be65" :weight bold)
            (?C :foreground "#c678dd" :weight bold))
            org-agenda-block-separator 8411))
#+end_src

*** Todo
**** Log Note
#+begin_src emacs-lisp
  (setq org-log-done 'note)
#+end_src

**** Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
         '((sequence "TODO" "STUDY SESSION" "DONE" "PROJECT" "STUDY PLAN" "STARTED" "IN PROGRESS" "NEXT" "WAIT" "CANCELED" "BACKLOG" "REVIEW" "FREE")))

  (setq org-todo-keyword-faces
        '(("TODO"          . (:foreground "#a60000"  :weight bold))
          ("STUDY SESSION" . (:foreground "#a0132f"  :weight bold))
          ("DONE"          . (:foreground "#006800"  :weight bold))
          ("PROJECT"       . (:foreground "#2f3f83"  :weight bold))
          ("STUDY PLAN"    . (:foreground "#731c52"  :weight bold))
          ("STARTED"       . (:foreground "#6f5500"  :weight bold))
          ("IN PROGRESS"   . (:foreground "#008899"  :weight bold))
          ("NEXT"          . (:foreground "#005e8b"  :weight bold))
          ("WAIT"          . (:foreground "#808000"  :weight bold))
          ("CANCELED"      . (:foreground "#d00000"  :weight bold))
          ("BACKLOG"       . (:foreground "#7f0000"  :weight bold))
          ("REVIEW"        . (:foreground "#721045"  :weight bold))
          ("FREE"          . (:foreground "#dd22dd"  :weight bold))))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "PROJECT(p)" "STARTED(T)" "IN PROGRESS(P)" "NEXT(n)" "WAIT(w)")
          (sequence "STUDY SESSION(s)" "STUDY PLAN(S)" "REVIEW(r)")
          (sequence "BACKLOG(b)" "|" "CANCELED(c)" "FREE(f)")))
#+end_src

*** Visualization
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
             (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "pixote"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Pixote-related tasks:")))
            (tags "raizes"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Raizes-related tasks:")))
            (tags "artmar"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks related to Arthur and Marina:")))
            (agenda "")
            (alltodo "")))))
#+end_src

** Bullet Points
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Directory
#+begin_src emacs-lisp
  (setq org-directory "~/Desktop/Documents")
#+end_src

** ORG Block Templates
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** ORG Roam
Just make sure you've got a C compiler installed like ~gcc~.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Desktop/Notes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)
       ("b" "book notes (ABNT)" plain
        (file "~/Desktop/Notes/Templates/BookNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Book\n#+date: %U\n\n")
        :unnarrowed t)
       ("c" "cornell" plain
        (file "~/Desktop/Notes/Templates/CornellNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Study\n#+date: %U\n\n")
        :unnarrowed t)
       ("p" "project" plain
        "\n* PROJECT ${title} :toc:\n* Goals\n- [ ] %?\n- [ ] \n- [ ] \n\n* Roadmap\n** 1st Step\n- \n\n** 2nd Step\n -\n\n** 3rd Step\n- \n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+option: toc:3\n#+filetags: Project\n#+date: %U\n\n")
        :unnarrowed t)
       ("s" "study plan" plain
        "\n* STUDY PLAN ${title} :toc:\n* Competence Aims\n- [ ] %?\n- [ ] \n- [ ] \n\n* Roadmap\n** 1st Step\n- \n\n** 2nd Step\n -\n\n** 3rd Step\n- \n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+option: toc:3\n#+filetags: Plan\n#+date: %U\n\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
           :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n h" . org-id-get-create)
           ("C-c n a" . org-roam-alias-add)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (org-roam-setup))
#+end_src

** Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Programming
** Language Supporting
*** Programming Languages
#+begin_src emacs-lisp
  (use-package php-mode)
#+end_src

*** Rainbow Delimiters
Adding rainbow coloring to parentheses, helping Lisp Enjoyers.
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook ((emacs-lisp-mode . rainbow-delimiters-mode)
           (scheme-mode . rainbow-delimiters-mode)
           (lisp-mode . rainbow-delimiters-mode)
           (common-lisp-mode . rainbow-delimiters-mode)
           (clojure-mode . rainbow-delimiters-mode)))
#+end_src

*** Syntax Checker (Flycheck)
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode)
  (progn
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00011100
	      #b00111110
	      #b00111110
	      #b00111110
	      #b00011100
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000))

    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-error)

    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-warning)

    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-info)))
#+end_src

** NeoTree
#+begin_src emacs-lisp
  (use-package neotree
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action) 
          ;; truncate long file names in neotree
          (add-hook 'neo-after-create-hook
             #'(lambda (_)
                 (with-current-buffer (get-buffer neo-buffer-name)
                   (setq truncate-lines t)
                   (setq word-wrap nil)
                   (make-local-variable 'auto-hscroll-mode)
                   (setq auto-hscroll-mode nil)))))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode 1))
#+end_src

* Sane Defaults
#+begin_src emacs-lisp  
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file) ;; Opens ORG buffers in the same frame instead of creating a new one
  (setq backup-directory-alist '((".*" . "~/.local/share/Trash/files"))) ;; Backup files go directly to trash instead of cluttering the project folder
  (delete-selection-mode 1)    ;; You can select text and delete it by typing.
  (electric-indent-mode -1)    ;; Turn off the weird indenting that Emacs does by default.
  (electric-pair-mode 1)       ;; Turns on automatic parens pairing
  ;; The following prevents <> from auto-pairing when electric-pair-mode is on.
  ;; Otherwise, org-tempo is broken when you try to <s TAB...
  (add-hook 'org-mode-hook (lambda ()
             (setq-local electric-pair-inhibit-predicate
                     `(lambda (c)
                    (if (char-equal c ?<) t (,electric-pair-inhibit-predicate c))))))
  (global-auto-revert-mode t)  ;; Automatically show changes if the file has changed
  ;; (global-display-line-numbers-mode) ;; Display line numbers
  ;; (global-visual-line-mode t)  ;; Enable truncated lines
  (menu-bar-mode -1)           ;; Disable the menu bar 
  (scroll-bar-mode -1)         ;; Disable the scroll bar
  (tool-bar-mode -1)           ;; Disable the tool bar
  ;; (setq org-edit-src-content-indentation 0) ;; Set src block automatic indent to 0 instead of 2.
#+end_src

* Shells and Terminals
** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.
  
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* UI
** Dashboard
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t 
    :init
    (setq dashboard-footer-messages '("Dashboard is pretty cool!"))
    (setq dashboard-footer-icon (all-the-icons-faicon "crosshairs"
                                                   :height 1.1
                                                   :v-adjust -0.05
                                                   :face 'font-lock-keyword-face))
    (setq initial-buffer-choice 'dashboard-open)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-banner-logo-title "OMNIA IN GLORIAM DEI FACITE")
    (setq dashboard-startup-banner "~/.emacs.d/dashboard.png")
    (setq dashboard-center-content t)
    (setq dashboard-items '((recents . 5)
                            (agenda . 5 )
                            (bookmarks . 3)
                            (projects . 3)
                            (registers . 3)))
    :custom
    (dashboard-modify-heading-icons '((recents . "file-text")
                                      (bookmarks . "book")))
    :config
    (dashboard-setup-startup-hook))
#+end_src


** Minor Changes
*** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

*** Status Bar
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** Zooming In/Out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

** Modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
      :custom    
      (doom-modeline-height 25)
      (doom-modeline-bar-width 1)
      (doom-modeline-icon t)
      (doom-modeline-major-mode-icon t)
      (doom-modeline-major-mode-color-icon t)
      (doom-modeline-buffer-file-name-style 'truncate-upto-project)
      (doom-modeline-buffer-state-icon t)
      (doom-modeline-buffer-modification-icon t)
      (doom-modeline-minor-modes nil)
      (doom-modeline-enable-word-count nil)
      (doom-modeline-buffer-encoding t)
      (doom-modeline-indent-info nil)
      (doom-modeline-checker-simple-format t)
      (doom-modeline-vcs-max-length 12)
      (doom-modeline-env-version t)
      (doom-modeline-irc-stylize 'identity)
      (doom-modeline-github-timer nil)
      (doom-modeline-gnus-timer nil)
      :config
      (doom-modeline-mode t)
      (display-time))
#+end_src

** Theme
#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :config
    (require 'spacemacs-theme)
    (deftheme spacemacs-dark "Spacemacs theme, dark version")
    (create-spacemacs-theme 'dark 'spacemacs-dark)
    (provide-theme 'spacemacs-dark)
    (load-theme 'spacemacs-dark t))
#+end_src

** Wallpaper
*** Transparency
It will only work with a compositor (~picom~) running.
#+begin_src emacs-lisp
  ;; Emacs 29 method
  (set-frame-parameter nil 'alpha-background 95)
  (add-to-list 'default-frame-alist '(alpha-background . 95))
  ;; Daviwill method
  ;; (set-frame-parameter (selected-frame) 'alpha '(90 . 90))
  ;; (add-to-list 'default-frame-alist '(alpha . (90 . 90)))
  ;; (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  ;; (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
