#+TITLE: Matheus Alpes's GNU Emacs Config
#+AUTHOR: Matheus Alpes
#+DESCRIPTION: Matheus Alpes's personal GNU Emacs config.
#+STARTUP: showeverthing
#+OPTION: toc:2

* Table of Contents :toc:
- [[#above-all][Above All]]
  - [[#elpaca][Elpaca]]
  - [[#exwm][EXWM]]
  - [[#sudo-edit][Sudo Edit]]
- [[#buffer-management][Buffer Management]]
  - [[#mouse-buttons][Mouse Buttons]]
- [[#launcher][Launcher]]
- [[#meow][Meow]]
- [[#org-mode][ORG Mode]]
  - [[#agenda][Agenda]]
  - [[#bullet-points][Bullet Points]]
  - [[#directory][Directory]]
  - [[#hyperlinks][Hyperlinks]]
  - [[#indentation][Indentation]]
  - [[#org-block-templates][ORG Block Templates]]
  - [[#org-roam][ORG Roam]]
  - [[#table-of-contents][Table of Contents]]
- [[#programming][Programming]]
  - [[#language-supporting][Language Supporting]]
  - [[#projectile][Projectile]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
- [[#fonts-and-icons][Fonts and Icons]]
  - [[#emojify][Emojify]]
  - [[#font-faces][Font Faces]]
  - [[#icons][Icons]]
- [[#ui][UI]]
  - [[#dashboard][Dashboard]]
  - [[#minor-changes][Minor Changes]]
  - [[#theme][Theme]]
  - [[#wallpaper][Wallpaper]]

* Above All
** Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.6)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
				:ref nil
				:files (:defaults "elpaca-test.el" (:exclude "extensions"))
				:build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
	 (build (expand-file-name "elpaca/" elpaca-builds-directory))
	 (order (cdr elpaca-order))
	 (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
	  (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
		   ((zerop (call-process "git" nil buffer t "clone"
					 (plist-get order :repo) repo)))
		   ((zerop (call-process "git" nil buffer t "checkout"
					 (or (plist-get order :ref) "--"))))
		   (emacs (concat invocation-directory invocation-name))
		   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
					 "--eval" "(byte-recompile-directory \".\" 0 'force)")))
		   ((require 'elpaca))
		   ((elpaca-generate-autoloads "elpaca" repo)))
	      (progn (message "%s" (buffer-string)) (kill-buffer buffer))
	    (error "%s" (with-current-buffer buffer (buffer-string))))
	((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
    (setq elpaca-use-package-by-default t))

  ;; Block until current queue processed.
  (elpaca-wait)

  ;;When installing a package which modifies a form used at the top-level
  ;;(e.g. a package which adds a use-package key word),
  ;;use `elpaca-wait' to block until that package has been installed/configured.
  ;;For example:
  ;;(use-package general :demand t)
  ;;(elpaca-wait)

  ;;Turns off elpaca-use-package-mode current declaration
  ;;Note this will cause the declaration to be interpreted immediately (not deferred).
  ;;Useful for configuring built-in emacs features.
  (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

  ;; Don't install anything. Defer execution of BODY
  (elpaca nil (message "deferred"))
#+end_src

** EXWM
#+begin_src emacs-lisp
  ;; Focus follows mouse
  (setq mouse-autoselect-window t
        focus-follows-mouse t)

  (defun alpes/exwm-update-class ()
    (exwm-workspace-rename-buffer exwm-class-name))

  (use-package exwm
    :config
    (require 'exwm)

    ;; Set correct resolution
    (require 'exwm-randr)
    (exwm-randr-enable)
    (add-hook 'exwm-randr-screen-change-hook
              (lambda ()
                (start-process-shell-command
                 "xrandr" nil "xrandr --output eDP1 --off --output HDMI1 --primary --mode 1920x1080")))

    ;; Workspaces 
    (setq exwm-workspace-number 5)

    ;; Forcing Tiling
    ;; (setq exwm-manage-force-tiling t)

    ;; Keys to pass through to Emacs
    (setq exwm-input-prefix-keys
          '(?\C-x
            ?\C-u
            ?\C-h
            ?\M-x
            ?\M-`
            ?\M-&
            ?\M-:
            ?\C-\M-j
            ?\C-\ ))

    ;; Ctrl + Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Global Keybindings
    (setq exwm-input-global-keys
          ;; Reset to line mode
          `(([?\s-r] . exwm-reset)

            ;; Launch apps via shell
            ([?\s-&] . (lambda (command)
                         (interactive (list (read-shell-command "$ ")))
                         (start-process-shell-command command nil command)))

            ;; Switch workspace
            ([?\s-w] . exwm-workspace-switch)

            ;; Switch workspace using number keys
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create , i))))
                      (number-sequence 0 9))))
    (exwm-enable))
#+end_src


** Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit)
#+end_src

* Buffer Management
** Mouse Buttons
#+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<drag-mouse-8>") 'previous-buffer)
  (global-set-key (kbd "<mouse-9>") 'next-buffer)
  (global-set-key (kbd "<drag-mouse-9>") 'next-buffer)
#+end_src

* Launcher
Creates and selects a frame called emacs-run-launcher which consists only of a minibuffer and has specific dimensions. Runs ~app-launcher-run-app~ on that frame, which is an emacs command that prompts you to select an app and open it in a dmenu like behaviour. Delete the frame after that command has exited.

#+begin_src emacs-lisp
  (use-package app-launcher
    :elpaca '(app-launcher :host github :repo "SebastienWae/app-launcher"))

  (defun emacs-run-launcher ()
    (interactive)
    (with-selected-frame 
      (make-frame '((name . "emacs-run-launcher")
                    (minibuffer . only)
                    (fullscreen . 0) ; no fullscreen
                    (undecorated . t) ; remove title bar
                    ;;(auto-raise . t) ; focus on this frame
                    ;;(tool-bar-lines . 0)
                    ;;(menu-bar-lines . 0)
                    (internal-border-width . 10)
                    (width . 80)
                    (height . 11)))
                    (unwind-protect
                      (app-launcher-run-app)
                      (delete-frame))))
#+end_src

Don't forget to create a shortcut for ~emacsclient -cF "((visibility . nil))" -e "(emacs-run-launcher)"~.

* Meow
#+begin_src emacs-lisp
  (defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))

  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))

  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

  (use-package meow
    :ensure t
    :config
    (require 'meow)
    (meow-setup)
    (meow-global-mode 1))
#+end_src

* ORG Mode
** Agenda
*** Agenda Files
#+begin_src emacs-lisp
  (setq org-agenda-files '("~/Desktop/Agenda.org"))
#+end_src

*** Priorities
#+begin_src emacs-lisp
  (use-package org-fancy-priorities
    :ensure t
    :diminish
    :hook
      (org-mode . org-fancy-priorities-mode)
    :config
      (setq
        ;; org-fancy-priorities-list '("[A]" "[B]" "[C]")
        ;; org-fancy-priorities-list '("❗" "[B]" "[C]")
        org-fancy-priorities-list '("🈲" "🈺" "🈯")
        org-priority-faces
          '((?A :foreground "#ff6c6b" :weight bold)
            (?B :foreground "#98be65" :weight bold)
            (?C :foreground "#c678dd" :weight bold))
            org-agenda-block-separator 8411))
#+end_src

*** Todo
**** Log Note
#+begin_src emacs-lisp
  (setq org-log-done 'note)
#+end_src

**** Keywords
#+begin_src emacs-lisp
  (setq org-todo-keywords
         '((sequence "TODO" "STUDY SESSION" "DONE" "PROJECT" "STUDY PLAN" "STARTED" "IN PROGRESS" "NEXT" "WAIT" "CANCELED" "BACKLOG" "REVIEW" "FREE")))

  (setq org-todo-keyword-faces
        '(("TODO"          . (:foreground "#a60000"  :weight bold))
          ("STUDY SESSION" . (:foreground "#a0132f"  :weight bold))
          ("DONE"          . (:foreground "#006800"  :weight bold))
          ("PROJECT"       . (:foreground "#2f3f83"  :weight bold))
          ("STUDY PLAN"    . (:foreground "#731c52"  :weight bold))
          ("STARTED"       . (:foreground "#6f5500"  :weight bold))
          ("IN PROGRESS"   . (:foreground "#008899"  :weight bold))
          ("NEXT"          . (:foreground "#005e8b"  :weight bold))
          ("WAIT"          . (:foreground "#808000"  :weight bold))
          ("CANCELED"      . (:foreground "#d00000"  :weight bold))
          ("BACKLOG"       . (:foreground "#7f0000"  :weight bold))
          ("REVIEW"        . (:foreground "#721045"  :weight bold))
          ("FREE"          . (:foreground "#dd22dd"  :weight bold))))

  (setq org-todo-keywords
        '((sequence "TODO(t)" "|" "DONE(d)")
          (sequence "PROJECT(p)" "STARTED(T)" "IN PROGRESS(P)" "NEXT(n)" "WAIT(w)")
          (sequence "STUDY SESSION(s)" "STUDY PLAN(S)" "REVIEW(r)")
          (sequence "BACKLOG(b)" "|" "CANCELED(c)" "FREE(f)")))
#+end_src

*** Visualization
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("v" "A better agenda view"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "PRIORITY=\"B\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Medium-priority unfinished tasks:")))
             (tags "PRIORITY=\"C\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Low-priority unfinished tasks:")))
            (tags "pixote"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Pixote-related tasks:")))
            (tags "raizes"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Raizes-related tasks:")))
            (tags "artmar"
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "Tasks related to Arthur and Marina:")))
            (agenda "")
            (alltodo "")))))
#+end_src

** Bullet Points
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
  (use-package org-bullets)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Directory
#+begin_src emacs-lisp
  (setq org-directory "~/Desktop/Documents")
#+end_src

** Hyperlinks
Use this to open new ORG or ORG Roam hyperlinks in the same window instead of creating another one.
#+begin_src emacs-lisp
  (setf (cdr (assoc 'file org-link-frame-setup)) 'find-file)
#+end_src

** Indentation
#+begin_src emacs-lisp
  (electric-indent-mode -1)
#+end_src

** ORG Block Templates
| Typing the below + TAB | Expands to ...                          |
|------------------------+-----------------------------------------|
| <a                     | '#+BEGIN_EXPORT ascii' … '#+END_EXPORT  |
| <c                     | '#+BEGIN_CENTER' … '#+END_CENTER'       |
| <C                     | '#+BEGIN_COMMENT' … '#+END_COMMENT'     |
| <e                     | '#+BEGIN_EXAMPLE' … '#+END_EXAMPLE'     |
| <E                     | '#+BEGIN_EXPORT' … '#+END_EXPORT'       |
| <h                     | '#+BEGIN_EXPORT html' … '#+END_EXPORT'  |
| <l                     | '#+BEGIN_EXPORT latex' … '#+END_EXPORT' |
| <q                     | '#+BEGIN_QUOTE' … '#+END_QUOTE'         |
| <s                     | '#+BEGIN_SRC' … '#+END_SRC'             |
| <v                     | '#+BEGIN_VERSE' … '#+END_VERSE'         |

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

** ORG Roam
Just make sure you've got a C compiler installed like ~gcc~.

#+begin_src emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Desktop/Notes")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("d" "default" plain
        "\n%?"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+date: %U\n\n")
        :unnarrowed t)
       ("b" "book notes (ABNT)" plain
        (file "~/Desktop/Notes/Templates/BookNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Book\n#+date: %U\n\n")
        :unnarrowed t)
       ("c" "cornell" plain
        (file "~/Desktop/Notes/Templates/CornellNotes.org")
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: Study\n#+date: %U\n\n")
        :unnarrowed t)
       ("p" "project" plain
        "\n* PROJECT ${title} :toc:\n* Goals\n- [ ] %?\n- [ ] \n- [ ] \n\n* Roadmap\n** 1st Step\n- \n\n** 2nd Step\n -\n\n** 3rd Step\n- \n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+option: toc:3\n#+filetags: Project\n#+date: %U\n\n")
        :unnarrowed t)
       ("s" "study plan" plain
        "\n* STUDY PLAN ${title} :toc:\n* Competence Aims\n- [ ] %?\n- [ ] \n- [ ] \n\n* Roadmap\n** 1st Step\n- \n\n** 2nd Step\n -\n\n** 3rd Step\n- \n\n"
        :if-new (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+option: toc:3\n#+filetags: Plan\n#+date: %U\n\n")
        :unnarrowed t)))
    (org-roam-dailies-capture-templates
      '(("d" "default" entry "* %<%I:%M %p>: %?"
         :if-new (file+head "%<%Y-%m-%d>.org" "#+title: %<%Y-%m-%d>\n"))))
           :bind (("C-c n l" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n i" . org-roam-node-insert)
           ("C-c n h" . org-id-get-create)
           ("C-c n a" . org-roam-alias-add)
           :map org-mode-map
           ("C-M-i" . completion-at-point)
           :map org-roam-dailies-map
           ("Y" . org-roam-dailies-capture-yesterday)
           ("T" . org-roam-dailies-capture-tomorrow))
    :bind-keymap
    ("C-c n d" . org-roam-dailies-map)
    :config
    (require 'org-roam-dailies)
    (org-roam-db-autosync-mode)
    (org-roam-setup))
#+end_src

** Table of Contents
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

* Programming
** Language Supporting
*** Syntax Checker (Flycheck)
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode)
  (progn
    (define-fringe-bitmap 'my-flycheck-fringe-indicator
      (vector #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00011100
	      #b00111110
	      #b00111110
	      #b00111110
	      #b00011100
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000
	      #b00000000))

    (flycheck-define-error-level 'error
      :severity 2
      :overlay-category 'flycheck-error-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-error)

    (flycheck-define-error-level 'warning
      :severity 1
      :overlay-category 'flycheck-warning-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-warning)

    (flycheck-define-error-level 'info
      :severity 0
      :overlay-category 'flycheck-info-overlay
      :fringe-bitmap 'my-flycheck-fringe-indicator
      :fringe-face 'flycheck-fringe-info)))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode 1))
#+end_src

* Shells and Terminals
** Eshell
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after esh-mode
    :config
    (eshell-syntax-highlighting-global-mode +1))

  ;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
  ;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
  ;; eshell-aliases-file -- sets an aliases file for the eshell.
  
  (setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
        eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
        eshell-history-size 5000
        eshell-buffer-maximum-lines 5000
        eshell-hist-ignoredups t
        eshell-scroll-to-bottom-on-input t
        eshell-destroy-buffer-when-process-dies t
        eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src

* Fonts and Icons
** Emojify
#+begin_src emacs-lisp
  (use-package emojify
    :config
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
        t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (bind-key* (kbd "C-c p") #'emojify-insert-emoji)) 
#+end_src

** Font Faces
#+begin_src emacs-lisp
  (set-face-attribute 'default nil
		      :font "GoMono Nerd Font Mono"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'variable-pitch nil
		      :font "Tinos Nerd Font"
		      :height 120
		      :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
		      :font "GoMono Nerd Font Mono"
		      :height 120
		      :weight 'medium)
  (add-to-list 'default-frame-alist '(font . "Tinos Nerd Font Mono-12"))
  (setq-default line-spacing 0.12)
#+end_src

** Icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
 #+end_src

Then run ~all-the-icons-install-fonts~.

* UI
** Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "OMNIA IN GLORIAM DEI FACITE")
  (setq dashboard-startup-banner "~/.emacs.d/dashboard.png")
  (setq dashboard-center-content nil)
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src


** Minor Changes
*** Changing Defaults
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

*** Rainbow Mode
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :diminish
    :hook 
    ((org-mode prog-mode) . rainbow-mode))
#+end_src

*** Status Bar
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

*** Zooming In/Out
#+begin_src emacs-lisp
  (global-set-key (kbd "C-=") 'text-scale-increase)
  (global-set-key (kbd "C--") 'text-scale-decrease)
  (global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
  (global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src


** Theme
#+begin_src emacs-lisp
  (use-package spacemacs-theme
    :config
    (require 'spacemacs-theme)
    (deftheme spacemacs-light "Spacemacs theme, light version")
    (create-spacemacs-theme 'light 'spacemacs-light)
    (provide-theme 'spacemacs-light)
    (load-theme 'spacemacs-light t))
#+end_src

** Wallpaper
*** Transparency
It will only work with a compositor (~picom~) running.
#+begin_src emacs-lisp
(set-frame-parameter nil 'alpha-background 95)
(add-to-list 'default-frame-alist '(alpha-background . 95))
#+end_src
